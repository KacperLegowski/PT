using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization;

namespace _1
{
    public static class MyExtensions
    {
        public static DateTime OldestElemDate(this DirectoryInfo directory, DateTime? prevOldest = null)
        {
            if (prevOldest == null || prevOldest < directory.LastWriteTime)
                prevOldest = directory.LastWriteTime;

            foreach (FileSystemInfo info in directory.GetFileSystemInfos())
            {
                if (info.LastWriteTime < prevOldest)
                    prevOldest = info.LastWriteTime;
            }

            foreach (DirectoryInfo dir in directory.GetDirectories())
            {
                DateTime date = dir.OldestElemDate();
                if (date < prevOldest)
                    prevOldest = date;
            }

            return (DateTime)prevOldest;
        }

        public static string DosAttributes(this FileSystemInfo info)
        {
            FileAttributes attribs = info.Attributes;
            return ((attribs & FileAttributes.ReadOnly) > 0 ? "r" : "-") +
                ((attribs & FileAttributes.Archive) > 0 ? "a" : "-") +
                ((attribs & FileAttributes.Hidden) > 0 ? "h" : "-") +
                ((attribs & FileAttributes.System) > 0 ? "s" : "-");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            ShowDir(new DirectoryInfo(args[0]));
            Console.WriteLine();
            Console.WriteLine("(b)");
            SortedDictionary<string, long> tmp = MakeDict(new DirectoryInfo(args[0]));
            Serialize(tmp);

             foreach (KeyValuePair<string, long> entry in tmp)
            {
                Console.WriteLine("{0} -> {1}", entry.Key, entry.Value);
            }
            Console.ReadKey();
        }

        static void Serialize(SortedDictionary<string, long> tmp)
        {
            FileStream fs = new FileStream("DataFile.dat", FileMode.Create);
            BinaryFormatter formatter = new BinaryFormatter();
            try
            {
                formatter.Serialize(fs, tmp);
            }
            catch (SerializationException e)
            {
                Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                throw;
            }
            finally
            {
                fs.Close();
            }
        }

        static void Deserialize(SortedDictionary<string, long> tmp) 
    {
        FileStream fs = new FileStream("DataFile.dat", FileMode.Open);
        try 
        {
            BinaryFormatter formatter = new BinaryFormatter();
            tmp = (SortedDictionary<string, long>) formatter.Deserialize(fs);
        }
        catch (SerializationException e) 
        {
            Console.WriteLine("Failed to deserialize. Reason: " + e.Message);
            throw;
        }
        finally 
        {
            fs.Close();
        }


        
    }


        static void ShowDir(DirectoryInfo directory, bool recursive = true, int indent = 0)
        {
            try
            {
                foreach (FileInfo file in directory.GetFiles())
                {
                    Console.WriteLine("{0}{1} {2} {3}",
                        new string(' ', indent),
                        file.Name,
                        file.Length,
                        file.DosAttributes());
                }

                foreach (DirectoryInfo dir in directory.GetDirectories())
                {
                    Console.WriteLine("{0}{1} ({2}) {3}",
                        new string(' ', indent),
                        dir.Name,
                        dir.GetFileSystemInfos().Length,
                        dir.DosAttributes());
                    if (recursive)
                        ShowDir(dir, recursive, indent + 2);
                }

            }
            catch (System.Exception ex)
            {
                Console.WriteLine("ERROR: " + ex.Message);
            }
        }

        static SortedDictionary<string, long> MakeDict(DirectoryInfo directory)
        {
            SortedDictionary<string, long> result =
                new SortedDictionary<string, long>(new NameComparer());

            foreach (FileInfo file in directory.GetFiles())
            {
                result.Add(file.Name, file.Length);
            }

            foreach (DirectoryInfo dir in directory.GetDirectories())
            {
                try
                {
                    result.Add(dir.Name, dir.GetFileSystemInfos().Length);
                }
                catch (UnauthorizedAccessException ex)
                { }
            }

            return result;
        }
        [Serializable]
        private class NameComparer : IComparer<string>
        {
            public int Compare(string x, string y)
            {
                if (x.Length != y.Length)
                    return x.Length - y.Length;
                else
                    return x.CompareTo(y);
            }
        }
    }
}
